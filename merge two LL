// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class Main {
    Node head1;
    Node head2;
    int size;
    void insert1(int value){
        Node node=new Node(value);
        node.next=head1;
        head1=node;
    }
     void insert2(int value){
        Node node=new Node(value);
        node.next=head2;
        head2=node;
    }
    void display1(){
        Node node=head1;
        while(node!=null){
            System.out.print(node.value+"-->");
            node=node.next;
        }
        System.out.print("END");
        
    }
    void display2(){
    Node node=head2;
        while(node!=null){
            System.out.print(node.value+"-->");
            node=node.next;
        }
        System.out.print("END");
    }
    public static void main(String[] args) {
        System.out.println("Try programiz.pro");
        Main l=new Main();
        l.insert1(7);
        l.insert1(5);
        l.insert1(3);
        l.insert1(1);
        l.insert2(8);
        l.insert2(6);
        l.insert2(4);
        l.insert2(2);
        l.display1();
        System.out.println();
        l.display2();
    }
    void Node  merge(Node h1,Node h2){
        
    }
    private class Node {
        Node next;
        int value;
        Node(int val){
            this.value=val;
        }
        Node (int value,Node next){
            this.value=value;
            this.next=next;
        }
    }
}
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

class Main {
    public static void main(String[] args) {
        System.out.println("Try programiz.pro");
    }
    static ListNode mergeLL(ListNode list1,ListNode list2){
        ListNode dummy=new ListNode(0);
        ListNode current=dummy;
        while(list1!=null&&list2!=null){
            if(list1.val>list2.val){
                current.next=list2;
                list2=list2.next;
            }
            else {
                current.next=list1;
                list1=list1.next;
            }
            current=current.next;
        }
        if(list1!=null) current.next=list1;
        if(list2!=null)current.next=list2;
        return dummy.next;
    }
}
