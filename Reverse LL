/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        if(head==null||head.next==null)return head;
     ListNode pre=null;
     ListNode pres=head;
     ListNode next=head.next;
     while(pres!=null){
        pres.next=pre;
        pre=pres;
        pres=next;
        if(next!=null)next=next.next;
     }
     return pre;   
    }
}
//reverse LinkedList ll 92 Leetcode
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        ListNode current=head;
     ListNode prev=null;   
     for(int i=0;current.next!=null&&i<left-1;i++){
        prev=current;
        current=current.next;
     }
     ListNode last=prev;
     ListNode newEnd=current;
     ListNode next=current.next;
     for(int i=0;i<right-left+1;i++){
        current.next=prev;
        prev=current;
        current=next;
        if(next!=null){
            next=next.next;
        }
     }
        if(last!=null){
            last.next=prev;
        }
        else head=prev;
        newEnd.next=current;
        return head;
    }
}
