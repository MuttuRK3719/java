$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$//     2 ms time complexity       $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
public boolean isValid(String s) {
        Stack<Character> stack=new Stack<>();
        if(s.length()==1) return false;
        for(int i=0;i<s.length();i++){
            char ch=s.charAt(i);
            if(ch=='('||ch=='{'||ch=='[')stack.push(ch);
            else {
                if(stack.isEmpty()||ch==')'&&stack.peek()!='(') return false;
                else if(stack.isEmpty()||ch=='}'&&stack.peek()!='{') return false;
               else  if(stack.isEmpty()||ch==']'&&stack.peek()!='[') return false;
               stack.pop();
            }
        }
        return stack.isEmpty();
    }
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$//     0ms time complexity       $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
public boolean isValid(String s) {
        char[]ch=new char[s.length()/2];
        int top=0;
        for(char c:s.toCharArray()){
            switch(c){
                case  '(':
                case  '[':
                case '{':
                if(top<ch.length)ch[top++]=c;
                else  return false;
                break;
                case  ']': if(top==0||ch[--top]!='[') return false; break;
                case  '}':if(top==0||ch[--top]!='{') return false; break;
                case  ')':if(top==0||ch[--top]!='(') return false;  break;         
            }
        }
        return top==0;
    }

class MinStack {
Node head;
public void push(int val) {
    if(head==null){
        head=new Node(val,val,null);
    }
    else head=new Node(val,Math.min(val,head.min),head);
}
    public void pop() {
        head=head.next;
    }
    public int top() {
       return  head.val;
    }
    public int getMin() {
       return  head.min;
    }
class Node{
    int min;
    int val;
    Node next;
    Node(int val,int min,Node next){
        this.min=min;
        this.val=val;
        this.next=next;
    }

}
// private final static int default_size=10;
// int end=0;
// int []data;
//     public MinStack() {
//         this(default_size);
//     }
//     private MinStack(int size){
//         data=new int[size];
//     }
    
//     public void push(int val) {
//         if(end==data.length){
//             int []temp=new int [data.length*2];
//             for(int i=0;i<data.length;i++)temp[i]=data[i];
//             data=temp;
//         }
//         data[end++]=val;
//     }
    
//     public void pop() {
//      data[--end]=0;
//     }
    
//     public int top() {
//       return data[end-1];
//     }
    
//     public int getMin() {
//         int min=data[0];
//         for(int i=1;i<end;i++){
//             if(data[i]<min) min=data[i];
//         }
//         return min;
//     }
}
https://leetcode.com/problems/remove-outermost-parentheses/
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$//     2 ms time complexity       $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
 public String removeOuterParentheses1(String s) {
        char []ch=new char[s.length()];
        int k=0;
        Stack<Character> stack=new Stack<>();
        for(char c:s.toCharArray()){
            if(c=='('){
             if(stack.size()>0)ch[k++]=c;
             stack.push(c);
            }   
            else{
                if(stack.size()>1){
                stack.pop();
                    ch[k++]=c;
                }
                else stack.pop();
        }}
        char ch1[]=new char[k];
        for(int i=0;i<k;i++) ch1[i]=ch[i];
        return new String(ch1);
    }
     static {
        for (int i = 0; i < 500; i++) {
            removeOuterParentheses("");
        }
    }$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$//     0ms time complexity       $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
    public static  String removeOuterParentheses(String s) {
        char []ch=new char[s.length()];
        int k=0;
        int index=0;
        for(char c:s.toCharArray()){
           
            if(c=='('){
                if(index>0) ch[k++]=c;
                index++;
            }
            else {
                index--;
                if(index>0)ch[k++]=c;
            }
        }
        return new String(ch,0,k);
    }
https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$//     7 ms time complexity       $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
    static {
        for(int i=0;i<500;i++)removeDuplicates("");
    }
    public static String removeDuplicates(String s) {
        Deque<Character>stack=new ArrayDeque<>();
        for(char c:s.toCharArray()){
            if(!stack.isEmpty()&&stack.peek()==c){
                stack.pop();
            }
            else stack.push(c);
        }
        char[] ch=new char[stack.size()];
        for(int i=ch.length-1;i>=0;i--){
            ch[i]=stack.pop();
        }
        return new String(ch);
    }
https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$//     2 ms time complexity       $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
     public static String removeDuplicates(String s) {
        char []stack=new char[s.length()];
        int index=-1;
        for(char c:s.toCharArray()){
            if(index!=-1&&stack[index]==c) index--;
            else stack[++index]=c;
        }
        
        return new String(stack,0,++index);
     }
https://www.geeksforgeeks.org/problems/reverse-first-k-elements-of-queue/1
    public Queue<Integer> reverseFirstK(Queue<Integer> q, int k) {
        // code here
        int n=q.size();
        if(k>n) return q;
        Deque<Integer> result=new LinkedList<>(); 
        for(int i=0;i<n;i++){
            if(i<k)
            result.addFirst(q.poll());
            else result.addLast(q.poll());
        }
        return result;
    }
