/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */
class MyQueue {
    Stack<Integer> first ;
    Stack<Integer>second;
    public MyQueue() {
        first =new Stack<>();
        second=new Stack<>();  
    }
    
    public void push(int x) {
        first.push(x);
        }
     public int pop() {
        if(second.isEmpty()){
            while(!first.isEmpty()){
                second.push(first.pop());
            }
        }
        return second.pop();
    }
    public int peek() {
        if(second.isEmpty()){
        while(!first.isEmpty()){
            second.push(first.pop());
        }
        }
        return second.peek() ;
    }
    
    public boolean empty() {
        return first.isEmpty()&&second.isEmpty();
    }
}
class Solution {
    public int minAddToMakeValid1(String s) {
     int top=0;
     int count=0;
     char[] stack=new char[s.length()];
     for(char ch:s.toCharArray()){
        switch(ch){
            case '(':
            case '[':
            case '{':
             stack[top++]=ch;
            break;
            case ')': if(top==0||stack[--top]!='(') count++;break;
            case '}': if(top==0||stack[--top]!='{') count++; break;
            case ']':if (top==0||stack[--top]!='[') count++;break;
        }
     }   
     return count+top;
    }
    public int minAddToMakeValid2(String s) {
        int count=s.length();
        Stack<Character> stack=new Stack<>();
        for(char ch:s.toCharArray()){
            if(ch=='('){
              stack.push(ch);
              count--;  
            } 
            else if(!stack.isEmpty()) {
                stack.pop();
                count--;
            } 
        }
        return count+stack.size();
    }
 public int minAddToMakeValid(String s) {
 Stack<Character> stack=new Stack<>();
 for(char ch:s.toCharArray()){
    if(ch==')'){
        if(!stack.isEmpty()&&stack.peek()=='(') stack.pop();
        else stack.push(ch);
    }
    else stack.push(ch);
 } 
 return stack.size();
 }   
}

